const Post = require('../models/post');
const User = require('../models/user');
const Comment = require('../models/comment');
const { check, body, validationResult } = require('express-validator');
const passport = require('passport');
const bcrypt = require('bcryptjs');

exports.create_comment_post = [
    // Validate and sanitize the name field.

    body('content', 'Content required').trim().isLength({ min: 1 }),
    body('content', 'Max length exceeded').trim().isLength({ max: 250 }),
    body('picture').escape(),

    async (req, res, next) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            res.status(500).json({ msg: 'validation error' });
        } else {
            console.log(req.body);
            let picture = '';
            if (req.body.picture) {
                picture = req.body.picture.replaceAll('&#x2F;', '/');
            }
            const post = await Post.findById(req.params.id).exec();
            //console.log(post);
            const comment = new Comment({
                Content: req.body.content,
                Picture: picture,
                Author: req.user,
                Timestamp: new Date(),
                Post: post,
            }).save((err, rest) => {
                if (err) {
                    res.status(500).json({ msg: 'save error' });
                } else {
                    Post.findByIdAndUpdate(
                        req.params.id,
                        { $push: { Comments: rest } },
                        { upsert: true, new: true },
                        (err, data) => {
                            if (err) {
                                res.status(400).json({
                                    msg: 'post find error',
                                });
                            } else {
                                //console.log(rest);
                                res.status(200).json(rest);
                            }
                        }
                    );
                }
            });
        }
    },
];

/*  homepage single comment verify auth*/
exports.comment_auth_get = async (req, res, next) => {
    try {
        res.status(200).json('authorized');
    } catch (err) {
        res.status(404).json({ msg: 'Not Found' });
    }
};

/*  homepage single comment delete */
exports.delete_comment_delete = async (req, res, next) => {
    //const comment = await Comment.findById(req.params.cid).exec();
    if (req.isAuth) {
        Comment.deleteOne({ _id: req.params.cid }).then(async () => {
            const filter = { _id: req.params.id };
            const update = { $pull: { Comments: req.params.cid } };
            try {
                await Post.findOneAndUpdate(filter, update, {
                    returnOriginal: false,
                }).then(() => {
                    res.status(200).json({
                        msg: 'comment delete successful', // Success
                    });
                });
            } catch (err) {
                res.status(400).json({
                    msg: 'error',
                });
            }
        });
    } else {
        res.status(401).json({
            msg: 'error',
        });
    }
};

/*  profile single comment verify auth*/
exports.profile_comment_auth_get = async (req, res, next) => {
    try {
        res.status(200).json('authorized');
    } catch (err) {
        res.status(401).json({ msg: 'Not authorized' });
    }
};

/*  profile single comment delete */
exports.profile_delete_comment_delete = async (req, res, next) => {
    //const comment = await Comment.findById(req.params.cid).exec();
    if (req.isAuth) {
        Comment.deleteOne({ _id: req.params.cid }).then(async () => {
            const filter = { _id: req.params.id };
            const update = { $pull: { Comments: req.params.cid } };
            try {
                await Post.findOneAndUpdate(filter, update, {
                    returnOriginal: false,
                }).then(() => {
                    res.status(200).json({
                        msg: 'comment delete successful', // Success
                    });
                });
            } catch (err) {
                res.status(400).json({
                    msg: 'error',
                });
            }
        });
    } else {
        res.status(401).json({
            msg: 'error',
        });
    }
};

/* put cmt like */
exports.cmt_like_get = async (req, res, next) => {
    try {
        const currentUser = req.user;
        const filter = { _id: req.params.cid };
        const update = { Likes: currentUser };
        const newCmt = await Comment.findOneAndUpdate(filter, update, {
            returnOriginal: false,
        });
        //console.log(newCmt);
        res.status(200).json({ msg: 'success' });
    } catch (err) {
        res.status(400).json({ msg: 'error' });
    }
};

/* put cmt unlike */
exports.cmt_unlike_get = async (req, res, next) => {
    try {
        const currentUser = req.user;
        const filter = { _id: req.params.cid };
        const update = { $pull: { Likes: req.user.id } };
        try {
            const newCmt = await Comment.findOneAndUpdate(filter, update, {
                returnOriginal: false,
            });
            //console.log(newCmt);
            res.status(200).json({ msg: 'success' });
        } catch (err) {
            console.log(err);
        }
    } catch (err) {
        //console.log(err);
        res.status(400).json({ msg: 'error' });
    }
};
